#!/usr/bin/perl
# recursively submits jobs tracking dependencies to GridEngine
# Copyright (C) 2009-2010 Henning Glawe <glaweh@debian.org>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use Cwd;
use File::Spec;

my $dryrun=0;
my $recurse_dir='';
my $qsub_global_opts = '';
my $MAX_RECURSIONS=20;

sub submit_one {
	my ($script,$options,$recursion_level)=@_;
	if ($recursion_level > $MAX_RECURSIONS) {
		print "too many recursions: $recursion_level > $MAX_RECURSIONS\n";
		return 4223;
	}
	if (-s $script) {
		my $jobidfile="$script.submitted";
		if (! -s $jobidfile) {
			$script=~/^(.*\/)([^\/]+)$/;
			my ($dir,$script_base)=($1,$2);
			my $olddir=getcwd;
			chdir $dir;
			my $jobidfile="$script_base.submitted";

			my $dep_option='';
			my $dep_glob_file="$script_base.depends";
			if (-s $dep_glob_file) {
				my $dep_glob_fh;
				my @dep_files;
				my @dep_ids;
				my $n_patterns=0;
				open($dep_glob_fh,$dep_glob_file);
				while (<$dep_glob_fh>) {
					chomp;
					s/#.*//;
					next if (/^\s*$/);
					$n_patterns++;
					push @dep_files,glob;
				}
				close($dep_glob_fh);
				if ($n_patterns and (@dep_files < 1)) {
					print "not submitting: $script_base.depends exists, but no matching files found\n";
					chdir $olddir;
					return 4242;
				}
				foreach my $dep (@dep_files) {
					next if (-f "$dep.completed");
					my $dep_id;
					if (! -s "$dep.submitted") {
						my $retval=submit_one($dep,$options,$recursion_level+1);
						$dep_id=(1000000-$recursion_level) if ($dryrun and $retval==0);
						if ($retval != 0) {
							print "error submitting dependency job\n";
							chdir $olddir;
							return 4243;
						}
					}
					if ((! defined $dep_id) and (-s "$dep.submitted")) {
						my $dep_fh;
						open($dep_fh,"$dep.submitted");
						$_=<$dep_fh>;
						chomp;
						$dep_id=$_ unless (/^\s*$/);
						close($dep_fh);
					}
					push @dep_ids,$dep_id if (defined $dep_id);
				}
				if (@dep_ids) {
					$dep_option='-hold_jid ' . join(',',@dep_ids);
				}
			}

			my $qsub_cmd="qsub $options $dep_option $script_base";
			if ($dryrun) {
				print STDERR "dryrun: would run '$qsub_cmd'\n";
				chdir $olddir;
				return(0);
			}

			my $resultstring=`$qsub_cmd`;
			my $qsubret=$?;

			if (($qsubret == 0) and ($resultstring=~/^Your job ([0-9]+) .*/)) {
				open(my $fh,">$jobidfile");
				print $fh "$1\n";
				close($fh);
				print "Job $1 submitted\n";
				# create backref, as the script name is usually not available at runtime
				open($fh,">$1.script");
				print $fh "$script_base\n";
				close($fh);
				chdir $olddir;
				return($qsubret);
			} else {
				print 'Problem submitting job: ' . (defined $resultstring ? $resultstring : 'result empty') . "\n";
				chdir $olddir;
				return(4200);
			}
			chdir $olddir;
		} else {
			print "$script already submitted\n";
			return(0);
		}
	} else {
		print "Cannot run $script: no such file or directory!\n";
		return(4201);
	}
}

my $man  = 0;
my $help = 0;
GetOptions('recurse_dir|D=s' => \$recurse_dir,
	'qsub_opts|O=s' => \$qsub_global_opts,
	'dryrun|n' => \$dryrun,
	'help' => \$help,
	'man'  => \$man,
) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;
pod2usage(2) if (@ARGV < 1);

my @scripts;
if ($recurse_dir) {
	foreach my $tmpl (@ARGV) {
		die "directory '$recurse_dir' does not exist" unless (-d $recurse_dir);
		if ($tmpl =~ /\//) {
			die "No '/' in filenames when recursing, please!\n";
		} else {
			open(my $find,"find $recurse_dir -type f -name $tmpl -! -path \*/trash/\* -! -path \*/backup/\*|");
			push @scripts,map { chomp; $_ } <$find>;
			close($find);
		}
	}
} else {
	@scripts=@ARGV;
}
@scripts=map { File::Spec->rel2abs($_) } @scripts;

foreach my $script (@scripts) {
	print "script: $script\n";
	submit_one($script,$qsub_global_opts,0);
}

__END__

=head1 NAME

s_sub - Wrapper for qsub for mass submits with dependency handling

=head1 SYNOPSIS

s_sub [ options ] <jobscript> [jobscript ...]

 Options:
   --recurse_dir | -D <path>   find <jobscript> below <path>
   --dryrun      | -n          Perform every step except the final call to qsub
   --qsub_opts   | -O <opts>   Add <opts> to every qsub call
   --help                      brief help message
   --man                       full documentation

=head1 DESCRIPTION

C<s_sub> is a convenience wrapper around C<qsub>, a utility to submit batch
jobs to a HPC Cluster queueing system.

When calling C<qsub>, C<s_sub> changes into the directory containing
F<< <jobscript> >>, in order to make Sun Grid Engines '-cwd' option perform as
expected.

For each of the job scripts submitted, the corresponding job identifier is
written to a file called F<< <jobscript>.submitted >> in the same directory as
F<< <jobscript> >>. If this file is already present, the job is not submitted
again.

Before submitting F<< <jobscript> >>, a file called F<< <jobscript>.depends >> is
checked for other jobs this particular job depends on. All of these jobs are
submitted in the same way as F<< <jobscript> >>, and their job identifiers are added
to C<qsub>'s '-hold_jid' option, allowing F<< <jobscript> >> only to start after
their completion.

=head1 OPTIONS

=over 8

=item B<--recurse_dir> <path>, B<-D> <path>

Use C<find> to find all scripts matching <jobscript> below <path>. In this
case, <jobscript> may also be a pattern understood by C<find>.

=item B<--qsub_opts> <options>, B<-O> <options>

Call C<qsub> with <options>, added to the automatically generated ones.

=item B<--dryrun>, B<-n>

Enable dryrun mode, in order to see which steps would be performed without
actually calling C<qsub>. This is especially useful to check job
interdependencies.

=back

=head1 FILES

=over 8

=item F<jobscript.submitted> (written by C<s_sub>)

File containing the job identifier after a successful submission. Further 
attempts to submit <jobscript> are ignored if this file exists.

=item F<jobscript.depends> (optional, read by C<s_sub>)

File containing the paths of all other jobscripts this particular job
depends on. Shell globs like '*' and '?' are allowed in the file names.

=item F<jobscript.completed> (read by C<s_sub> when submitting dependent jobs)

If this file exists for a jobscript the submitted job depends on, its ID is
I<not> added to the list of jobs the depend on.
Should be written by all jobscripts after successful completion.

=back

=head1 EXAMPLES

=head2 Submit all jobs called job.sge found below /scratch/

C<s_sub -D /scratch job.sge>

=head2 Submit all jobs matching '*.sge' found below /scratch

C<s_sub -D /scratch '*.sge'>

Note that one usually needs to put quotes around a pattern in order
to protect it from the shell you are using.

=head2 Three jobs, the third can only run after the first two finish

=head3 Files:

=over 8

=item F</scratch/job1/job.sge>

=item F</scratch/job2/job.sge>

=item F</scratch/job3/job.sge>

=item F</scratch/job3/job.sge.depends> contains:

 ../job1/job.sge
 ../job2/job.sge

=back

=head3 Submission

C<s_sub /scratch/job3/job.sge>

Will submit all 3 jobs in the I<right> order, allowing F</scratch/job3/job.sge>
to start only after the other two are done.

=head1 AUTHOR

Henning Glawe <glawe@mpi-halle.mpg.de>

=cut
