#!/usr/bin/perl
# checks status of GridEngine jobs
# Copyright (C) 2010 Henning Glawe <glaweh@debian.org>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
use Getopt::Std;
use Data::Dumper;
use XML::Simple;
our ($opt_d);
getopts('d');
chomp (my $call_host=`hostname -f`);
if ($call_host =~/(cluster|mpi-halle\.mpg\.de)$/) {
	hstat_sge();
}
exit 0;
sub hstat_sge {
	my $qstat;
	my $hot=0;
	my $parsed;
	my $nodes;
	my $jobs;
	open($qstat,"-|","qstat -u '*' -f");
	my $nodename;
	while (<$qstat>) {
		chomp;
		last if (/^\s*$/);
		if (/^-*$/) {
			$parsed = __LINE__-1;
			$hot=1;
			next;
		}
		if ($hot == 1) {
			# host line:
			# par_c_12@node085.cluster       P     0/12/12        12.18    lx24-amd64
			if (/^(\S+)@([^\.]+)\.\S+\s*(\S+)\s*(\S+)\s*(\S+)\s*(\S+)\s*/) {
				$parsed = __LINE__-1;
				$nodename=$2;
				$nodes->{$nodename}->{queue}=$1;
				$nodes->{$nodename}->{state}=$3;
				$nodes->{$nodename}->{slots}=$4;
				$nodes->{$nodename}->{load}=$5;
				$nodes->{$nodename}->{arch}=$6;
				$hot=2;
			} else {
				warn "could not parse nodeline \"$_\"\n";
				$hot=0;
			}
			next;
		} elsif ($hot==2) {
			my ($job_id,$job_prio,$job_name,$job_owner,$job_state,$job_date,$job_time,$job_slots);
			($job_id,$job_prio,$job_name,$job_owner,$job_state,$job_date,$job_time,$job_slots)=split;
			push @{$nodes->{$nodename}->{jobs}},$job_id;
			$jobs->{$job_id}->{prio}=$job_prio;
			$jobs->{$job_id}->{name}=$job_name;
			$jobs->{$job_id}->{owner}=$job_owner;
			$jobs->{$job_id}->{state}=$job_state;
			$jobs->{$job_id}->{date}=$job_date;
			$jobs->{$job_id}->{time}=$job_time;
			$jobs->{$job_id}->{nodes}->{$nodename}=$job_slots;
		}
	}
	close($qstat);
	my ($x,$jobinfo);
	open($qstat,'-|','qstat -j ' . join(',',keys %{$jobs}) . ' -xml');
	$x=XMLin($qstat,ForceArray => ['element'],KeyAttr => { element=> 'JB_job_number', qmaster_response => 'JB_job_number' });
	if (exists $x->{djob_info}->{element}) {
		$jobinfo=$x->{djob_info}->{element};
	} elsif (exists $x->{djob_info}->{qmaster_response}) {
		$jobinfo=$x->{djob_info}->{qmaster_response};
	}
	close($qstat);
	# print "=== Nodes: ===\n" . Dumper($nodes) . "\n";
	# print "=== Jobs: ===\n" . Dumper($jobs) . "\n";
	my $time_now;
	$time_now=time;
	foreach my $job_id (sort { $a <=> $b } keys %{$jobs}) {
		next unless ($jobs->{$job_id}->{owner} eq $ENV{USER});
		my $wall_time;
		do {
			use Time::Local;
			my (@d,@t);
			@d=split('/',$jobs->{$job_id}->{date});
			@t=split(':',$jobs->{$job_id}->{time});
			my $start_time=timelocal($t[2],$t[1],$t[0],$d[1],$d[0]-1,$d[2]);
			my $runtime=($time_now-$start_time);
			my ($run_s,$run_m,$run_h);
			my $run_temp;
			$run_s=$runtime % 60;
			$run_temp=($runtime-$run_s) / 60;
			$run_m=$run_temp % 60;
			$run_temp-=$run_m;
			$run_h=$run_temp / 60;
			$wall_time="$run_h:$run_m:$run_s";
		};
		# check activity
		my ($activity_time,$activity_file);
		my $jobdir=(exists $jobinfo->{$job_id}->{JB_cwd} ? $jobinfo->{$job_id}->{JB_cwd} : 'UNSET');
		if ( -d $jobdir ) {
			my $newest_mtime=0;
			my $jobdir=$jobinfo->{$job_id}->{JB_cwd};
			if ($opt_d) {
				my $find;
				open ($find,'-|',"find $jobdir -type f -printf '%T@ %p\n'");
				while (<$find>) {
					chomp;
					my ($mtime,$filename)=split;
					if ($newest_mtime<$mtime) {
						$newest_mtime=$mtime;
						$activity_file=$filename;
					}
				}
				close($find);
				$newest_mtime=~ s/\.\d+//;
			} else {
				foreach my $filename (glob("$jobdir/*")) {
					next unless (-f $filename);
					my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
						$atime,$mtime,$ctime,$blksize,$blocks)
						= stat($filename);
					if ($newest_mtime<$mtime) {
						$newest_mtime=$mtime;
						$activity_file=$filename;
					}
				}
			}
			my $activitytime=($time_now-$newest_mtime);
			my ($activity_s,$activity_m,$activity_h);
			my $activity_temp;
			$activity_s=$activitytime % 60;
			$activity_temp=($activitytime-$activity_s) / 60;
			$activity_m=$activity_temp % 60;
			$activity_temp-=$activity_m;
			$activity_h=$activity_temp / 60;
			$activity_time="$activity_h:$activity_m:$activity_s";
		};
		print "Job: $job_id, Name: $jobinfo->{$job_id}->{JB_job_name}\n";
		print "Wall: $wall_time, Act: $activity_time (File: $activity_file)\n";
		foreach my $node (sort keys %{$jobs->{$job_id}->{nodes}}) {
			printf "    %8s %2d %5.2f",$node,$jobs->{$job_id}->{nodes}->{$node},$nodes->{$node}->{load};
			foreach my $n_job (sort @{$nodes->{$node}->{jobs}}) {
				next if ($n_job eq $job_id);
				printf "   $n_job,$jobs->{$n_job}->{nodes}->{$node},$jobs->{$n_job}->{owner}";
			}
			print "\n";
		}
		print "\n";
	}
}
